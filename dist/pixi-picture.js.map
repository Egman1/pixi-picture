{"version":3,"file":"pixi-picture.js","sourceRoot":"","sources":["../src/BlendFilter.ts","../src/FilterSystemMixin.ts","../src/MaskFilter.ts","../src/ShaderParts.ts","../src/Sprite.ts","../src/TilingSprite.ts","../src/xporter.ts"],"names":[],"mappings":"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","sourcesContent":["namespace pixi_picture {\r\n    export class BackdropFilter extends PIXI.Filter {\r\n        backdropUniformName: string = null;\r\n        _backdropActive: boolean = false;\r\n        clearColor: Float32Array = null;\r\n    }\r\n\r\n    export interface IBlendShaderParts {\r\n        uniformCode?: string;\r\n        uniforms?: { [key: string]: any };\r\n        blendCode: string;\r\n    }\r\n\r\n    const filterFrag = `\r\nvarying vec2 vTextureCoord;\r\n\r\nuniform sampler2D uSampler;\r\nuniform sampler2D uBackdrop;\r\n\r\n%UNIFORM_CODE%\r\n\r\nvoid main(void)\r\n{\r\n   vec4 b_src = texture2D(uSampler, vTextureCoord);\r\n   vec4 b_dest = texture2D(uBackdrop, vTextureCoord);\r\n   vec4 b_res = b_dest;\r\n   \r\n   %BLEND_CODE%\r\n\r\n   gl_FragColor = b_res;\r\n}`;\r\n\r\n    export class BlendFilter extends BackdropFilter {\r\n        constructor(shaderParts: IBlendShaderParts) {\r\n            let fragCode = filterFrag;\r\n            fragCode = fragCode.replace('%UNIFORM_CODE%', shaderParts.uniformCode || \"\");\r\n            fragCode = fragCode.replace('%BLEND_CODE%', shaderParts.blendCode || \"\");\r\n\r\n            super(undefined, fragCode, shaderParts.uniforms);\r\n\r\n            this.backdropUniformName = 'uBackdrop';\r\n        }\r\n    }\r\n}","declare namespace PIXI {\r\n    namespace systems {\r\n        interface FilterSystem {\r\n            prepareBackdrop(sourceFrame: PIXI.Rectangle): PIXI.RenderTexture;\r\n            pushWithCheck(target: PIXI.DisplayObject, filters: Array<Filter>, checkEmptyBounds?: boolean): boolean;\r\n        }\r\n\r\n        interface TextureSystem {\r\n            bindForceLocation(texture: BaseTexture, location: number): void;\r\n        }\r\n    }\r\n}\r\n\r\nnamespace pixi_picture {\r\n    function containsRect(rectOut: PIXI.Rectangle, rectIn: PIXI.Rectangle): boolean {\r\n        let r1 = rectIn.x + rectIn.width;\r\n        let b1 = rectIn.y + rectIn.height;\r\n        let r2 = rectOut.x + rectOut.width;\r\n        let b2 = rectOut.y + rectOut.height;\r\n        return (rectIn.x >= rectOut.x) &&\r\n            (rectIn.x <= r2) &&\r\n            (rectIn.y >= rectOut.y) &&\r\n            (rectIn.y <= b2) &&\r\n            (r1 >= rectOut.x) &&\r\n            (r1 <= r2) &&\r\n            (b1 >= rectOut.y) &&\r\n            (b1 <= b2);\r\n    }\r\n\r\n    PIXI.systems.TextureSystem.prototype.bindForceLocation = function(texture: PIXI.BaseTexture, location = 0) {\r\n        const { gl } = this;\r\n        if (this.currentLocation !== location)\r\n        {\r\n            this.currentLocation = location;\r\n            gl.activeTexture(gl.TEXTURE0 + location);\r\n        }\r\n        this.bind(texture, location);\r\n    }\r\n\r\n    function pushWithCheck(this: PIXI.systems.FilterSystem,\r\n                  target: PIXI.DisplayObject, filters: Array<BackdropFilter>, checkEmptyBounds: boolean = true) {\r\n        const renderer = this.renderer;\r\n        const filterStack = this.defaultFilterStack;\r\n        const state = this.statePool.pop() || new (PIXI as any).FilterState();\r\n\r\n        let resolution = filters[0].resolution;\r\n        let padding = filters[0].padding;\r\n        let autoFit = filters[0].autoFit;\r\n        let legacy = filters[0].legacy;\r\n\r\n        for (let i = 1; i < filters.length; i++) {\r\n            const filter = filters[i];\r\n\r\n            // lets use the lowest resolution..\r\n            resolution = Math.min(resolution, filter.resolution);\r\n            // figure out the padding required for filters\r\n            padding = this.useMaxPadding\r\n                // old behavior: use largest amount of padding!\r\n                ? Math.max(padding, filter.padding)\r\n                // new behavior: sum the padding\r\n                : padding + filter.padding;\r\n            // only auto fit if all filters are autofit\r\n            autoFit = autoFit || filter.autoFit;\r\n\r\n            legacy = legacy || filter.legacy;\r\n        }\r\n\r\n        if (filterStack.length === 1) {\r\n            this.defaultFilterStack[0].renderTexture = renderer.renderTexture.current;\r\n        }\r\n\r\n        filterStack.push(state);\r\n\r\n        state.resolution = resolution;\r\n\r\n        state.legacy = legacy;\r\n\r\n        state.target = target;\r\n\r\n        state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));\r\n\r\n        let canUseBackdrop = true;\r\n        state.sourceFrame.pad(padding);\r\n        if (autoFit) {\r\n            state.sourceFrame.fit(this.renderer.renderTexture.sourceFrame);\r\n        } else {\r\n            canUseBackdrop = containsRect(this.renderer.renderTexture.sourceFrame, state.sourceFrame);\r\n        }\r\n        if (checkEmptyBounds && state.sourceFrame.width <= 1 && state.sourceFrame.height <= 1) {\r\n            filterStack.pop();\r\n            state.clear();\r\n            this.statePool.push(state);\r\n            return false;\r\n        }\r\n\r\n        // round to whole number based on resolution\r\n        state.sourceFrame.ceil(resolution);\r\n\r\n        // detect backdrop uniform\r\n        if (canUseBackdrop) {\r\n            let backdrop = null;\r\n            for (let i = 0; i < filters.length; i++) {\r\n                const bName = filters[i].backdropUniformName;\r\n                if (bName) {\r\n                    if (backdrop === null) {\r\n                        backdrop = this.prepareBackdrop(state.sourceFrame);\r\n                    }\r\n\r\n                    filters[i].uniforms[bName] = backdrop;\r\n                    if (backdrop) {\r\n                        filters[i]._backdropActive = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height, resolution);\r\n        state.filters = filters;\r\n\r\n        state.destinationFrame.width = state.renderTexture.width;\r\n        state.destinationFrame.height = state.renderTexture.height;\r\n\r\n        const destinationFrame = this.tempRect;\r\n\r\n        destinationFrame.width = state.sourceFrame.width;\r\n        destinationFrame.height = state.sourceFrame.height;\r\n\r\n        state.renderTexture.filterFrame = state.sourceFrame;\r\n\r\n        renderer.renderTexture.bind(state.renderTexture, state.sourceFrame, destinationFrame);\r\n        renderer.renderTexture.clear(filters[filters.length - 1].clearColor as any);\r\n\r\n        return true;\r\n    }\r\n\r\n    function push(this: PIXI.systems.FilterSystem,\r\n                  target: PIXI.DisplayObject, filters: Array<PIXI.Filter>) {\r\n        return this.pushWithCheck(target, filters, false);\r\n    }\r\n\r\n    function pop(this: PIXI.systems.FilterSystem) {\r\n        const filterStack = this.defaultFilterStack;\r\n        const state = filterStack.pop();\r\n        const filters = state.filters;\r\n\r\n        this.activeState = state;\r\n\r\n        const globalUniforms = this.globalUniforms.uniforms;\r\n\r\n        globalUniforms.outputFrame = state.sourceFrame;\r\n        globalUniforms.resolution = state.resolution;\r\n\r\n        const inputSize = globalUniforms.inputSize;\r\n        const inputPixel = globalUniforms.inputPixel;\r\n        const inputClamp = globalUniforms.inputClamp;\r\n\r\n        inputSize[0] = state.destinationFrame.width;\r\n        inputSize[1] = state.destinationFrame.height;\r\n        inputSize[2] = 1.0 / inputSize[0];\r\n        inputSize[3] = 1.0 / inputSize[1];\r\n\r\n        inputPixel[0] = inputSize[0] * state.resolution;\r\n        inputPixel[1] = inputSize[1] * state.resolution;\r\n        inputPixel[2] = 1.0 / inputPixel[0];\r\n        inputPixel[3] = 1.0 / inputPixel[1];\r\n\r\n        inputClamp[0] = 0.5 * inputPixel[2];\r\n        inputClamp[1] = 0.5 * inputPixel[3];\r\n        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);\r\n        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);\r\n\r\n        // only update the rect if its legacy..\r\n        if (state.legacy)\r\n        {\r\n            const filterArea = globalUniforms.filterArea;\r\n\r\n            filterArea[0] = state.destinationFrame.width;\r\n            filterArea[1] = state.destinationFrame.height;\r\n            filterArea[2] = state.sourceFrame.x;\r\n            filterArea[3] = state.sourceFrame.y;\r\n\r\n            globalUniforms.filterClamp = globalUniforms.inputClamp;\r\n        }\r\n\r\n        (this.globalUniforms as any).update();\r\n\r\n        const lastState = filterStack[filterStack.length - 1];\r\n\r\n        if (state.renderTexture.framebuffer.multisample > 1)\r\n        {\r\n            this.renderer.framebuffer.blit();\r\n        }\r\n\r\n        if (filters.length === 1)\r\n        {\r\n            filters[0].apply(this, state.renderTexture, lastState.renderTexture, PIXI.CLEAR_MODES.BLEND, state);\r\n\r\n            this.returnFilterTexture(state.renderTexture);\r\n        }\r\n        else\r\n        {\r\n            let flip = state.renderTexture;\r\n            let flop = this.getOptimalFilterTexture(\r\n                flip.width,\r\n                flip.height,\r\n                state.resolution\r\n            );\r\n\r\n            (flop as any).filterFrame = flip.filterFrame;\r\n\r\n            let i = 0;\r\n\r\n            for (i = 0; i < filters.length - 1; ++i)\r\n            {\r\n                filters[i].apply(this, flip, flop, PIXI.CLEAR_MODES.CLEAR, state);\r\n\r\n                const t = flip;\r\n\r\n                flip = flop;\r\n                flop = t;\r\n            }\r\n\r\n            filters[i].apply(this, flip, lastState.renderTexture, PIXI.CLEAR_MODES.BLEND, state);\r\n\r\n            this.returnFilterTexture(flip);\r\n            this.returnFilterTexture(flop);\r\n        }\r\n\r\n        let backdropFree = false;\r\n\r\n        for (let i = 0; i < filters.length; i++) {\r\n            if (filters[i]._backdropActive) {\r\n                const bName = filters[i].backdropUniformName;\r\n                if (!backdropFree) {\r\n                    this.returnFilterTexture(filters[i].uniforms[bName]);\r\n                    backdropFree = true;\r\n                }\r\n                filters[i].uniforms[bName] = null;\r\n                filters[i]._backdropActive = false;\r\n            }\r\n        }\r\n\r\n        state.clear();\r\n        this.statePool.push(state);\r\n    }\r\n\r\n    let hadBackbufferError = false;\r\n\r\n    /**\r\n     * Takes a part of current render target corresponding to bounds\r\n     * fits sourceFrame to current render target frame to evade problems\r\n     */\r\n    function prepareBackdrop(bounds: PIXI.Rectangle): PIXI.RenderTexture {\r\n        const renderer = this.renderer;\r\n        const renderTarget = renderer.renderTexture.current;\r\n        const fr = this.renderer.renderTexture.sourceFrame;\r\n\r\n        if (!renderTarget) {\r\n            if (!hadBackbufferError) {\r\n                hadBackbufferError = true;\r\n                console.warn('pixi-picture: you are trying to use Blend Filter on main framebuffer! That wont work.');\r\n            }\r\n            return null;\r\n        }\r\n\r\n        const resolution = renderTarget.baseTexture.resolution;\r\n\r\n        //bounds.fit(fr);\r\n\r\n        const x = (bounds.x - fr.x) * resolution;\r\n        const y = (bounds.y - fr.y) * resolution;\r\n        const w = (bounds.width) * resolution;\r\n        const h = (bounds.height) * resolution;\r\n\r\n        const gl = renderer.gl;\r\n        const rt = this.getOptimalFilterTexture(w, h, 1);\r\n\r\n        rt.filterFrame = fr;\r\n        renderer.texture.bindForceLocation(rt.baseTexture, 0);\r\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, x, y, w, h);\r\n\r\n        return rt;\r\n    }\r\n\r\n    PIXI.systems.FilterSystem.prototype.push = push;\r\n    PIXI.systems.FilterSystem.prototype.pushWithCheck = pushWithCheck as any;\r\n    PIXI.systems.FilterSystem.prototype.pop = pop;\r\n    PIXI.systems.FilterSystem.prototype.prepareBackdrop = prepareBackdrop;\r\n}\r\n","namespace pixi_picture {\r\n    export enum MASK_CHANNEL {\r\n        RED = 0,\r\n        GREEN,\r\n        BLUE,\r\n        ALPHA\r\n    }\r\n\r\n    export class MaskConfig {\r\n        constructor(public maskBefore = false, channel: MASK_CHANNEL = MASK_CHANNEL.ALPHA) {\r\n            this.uniforms.uChannel[channel] = 1.0;\r\n        }\r\n        uniformCode = 'uniform vec4 uChannel;';\r\n        uniforms: any = {\r\n            uChannel: new Float32Array([0, 0, 0, 0]), // shared uniform for all those shaders? ok, just set it before apply\r\n        };\r\n        blendCode = `b_res = dot(b_src, uChannel) * b_dest;`;\r\n    }\r\n\r\n    export class MaskFilter extends BlendFilter {\r\n        constructor(public baseFilter: PIXI.Filter, public config = new MaskConfig()) {\r\n            super(config);\r\n            this.padding = baseFilter.padding;\r\n        }\r\n\r\n        apply(filterManager: PIXI.systems.FilterSystem, input: PIXI.RenderTexture, output: PIXI.RenderTexture,\r\n              clearMode: PIXI.CLEAR_MODES) {\r\n            const target = filterManager.getFilterTexture(input);\r\n            if (this.config.maskBefore) {\r\n                const {blendMode} = this.state;\r\n                this.state.blendMode = PIXI.BLEND_MODES.NONE;\r\n                filterManager.applyFilter(this, input, target, PIXI.CLEAR_MODES.YES);\r\n                this.baseFilter.blendMode = blendMode;\r\n                this.baseFilter.apply(filterManager, target, output, clearMode);\r\n                this.state.blendMode = blendMode;\r\n            } else {\r\n                const {uBackdrop} = this.uniforms;\r\n                this.baseFilter.apply(filterManager, uBackdrop, target, PIXI.CLEAR_MODES.YES);\r\n                this.uniforms.uBackdrop = target;\r\n                filterManager.applyFilter(this, input, output, clearMode);\r\n                this.uniforms.uBackdrop = uBackdrop;\r\n            }\r\n            filterManager.returnFilterTexture(target);\r\n        }\r\n    }\r\n}","namespace pixi_picture {\r\n    export namespace blends {\r\n        export const NPM_BLEND =\r\n            `if (b_src.a == 0.0) {\r\n    gl_FragColor = vec4(0, 0, 0, 0);\r\n    return;\r\n}\r\nvec3 Cb = b_src.rgb / b_src.a, Cs;\r\nif (b_dest.a > 0.0) {\r\n    Cs = b_dest.rgb / b_dest.a;\r\n}\r\n%NPM_BLEND%\r\nb_res.a = b_src.a + b_dest.a * (1.0-b_src.a);\r\nb_res.rgb = (1.0 - b_src.a) * Cs + b_src.a * B;\r\nb_res.rgb *= b_res.a;\r\n`;\r\n\r\n        //reverse hardlight\r\n        export const OVERLAY_PART =\r\n            `vec3 multiply = Cb * Cs * 2.0;\r\nvec3 Cb2 = Cb * 2.0 - 1.0;\r\nvec3 screen = Cb2 + Cs - Cb2 * Cs;\r\nvec3 B;\r\nif (Cs.r <= 0.5) {\r\n    B.r = multiply.r;\r\n} else {\r\n    B.r = screen.r;\r\n}\r\nif (Cs.g <= 0.5) {\r\n    B.g = multiply.g;\r\n} else {\r\n    B.g = screen.g;\r\n}\r\nif (Cs.b <= 0.5) {\r\n    B.b = multiply.b;\r\n} else {\r\n    B.b = screen.b;\r\n}\r\n`;\r\n\r\n        export const HARDLIGHT_PART =\r\n            `vec3 multiply = Cb * Cs * 2.0;\r\nvec3 Cs2 = Cs * 2.0 - 1.0;\r\nvec3 screen = Cb + Cs2 - Cb * Cs2;\r\nvec3 B;\r\nif (Cb.r <= 0.5) {\r\n    B.r = multiply.r;\r\n} else {\r\n    B.r = screen.r;\r\n}\r\nif (Cb.g <= 0.5) {\r\n    B.g = multiply.g;\r\n} else {\r\n    B.g = screen.g;\r\n}\r\nif (Cb.b <= 0.5) {\r\n    B.b = multiply.b;\r\n} else {\r\n    B.b = screen.b;\r\n}\r\n`;\r\n\r\n        export const SOFTLIGHT_PART =\r\n            `vec3 first = Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\r\nvec3 B;\r\nvec3 D;\r\nif (Cs.r <= 0.5)\r\n{\r\n    B.r = first.r;\r\n}\r\nelse\r\n{\r\n    if (Cb.r <= 0.25)\r\n    {\r\n        D.r = ((16.0 * Cb.r - 12.0) * Cb.r + 4.0) * Cb.r;    \r\n    }\r\n    else\r\n    {\r\n        D.r = sqrt(Cb.r);\r\n    }\r\n    B.r = Cb.r + (2.0 * Cs.r - 1.0) * (D.r - Cb.r);\r\n}\r\nif (Cs.g <= 0.5)\r\n{\r\n    B.g = first.g;\r\n}\r\nelse\r\n{\r\n    if (Cb.g <= 0.25)\r\n    {\r\n        D.g = ((16.0 * Cb.g - 12.0) * Cb.g + 4.0) * Cb.g;    \r\n    }\r\n    else\r\n    {\r\n        D.g = sqrt(Cb.g);\r\n    }\r\n    B.g = Cb.g + (2.0 * Cs.g - 1.0) * (D.g - Cb.g);\r\n}\r\nif (Cs.b <= 0.5)\r\n{\r\n    B.b = first.b;\r\n}\r\nelse\r\n{\r\n    if (Cb.b <= 0.25)\r\n    {\r\n        D.b = ((16.0 * Cb.b - 12.0) * Cb.b + 4.0) * Cb.b;    \r\n    }\r\n    else\r\n    {\r\n        D.b = sqrt(Cb.b);\r\n    }\r\n    B.b = Cb.b + (2.0 * Cs.b - 1.0) * (D.b - Cb.b);\r\n}\r\n`;\r\n\r\n        export const MULTIPLY_FULL =\r\n            `if (dest.a > 0.0) {\r\n   b_res.rgb = (dest.rgb / dest.a) * ((1.0 - src.a) + src.rgb);\r\n   b_res.a = min(src.a + dest.a - src.a * dest.a, 1.0);\r\n   b_res.rgb *= mult.a;\r\n}\r\n`;\r\n        export const OVERLAY_FULL = NPM_BLEND.replace(`%NPM_BLEND%`, OVERLAY_PART);\r\n        export const HARDLIGHT_FULL = NPM_BLEND.replace(`%NPM_BLEND%`, HARDLIGHT_PART);\r\n        export const SOFTLIGHT_FULL = NPM_BLEND.replace(`%NPM_BLEND%`, SOFTLIGHT_PART);\r\n\r\n        export const blendFullArray: Array<string> = [];\r\n\r\n        blendFullArray[PIXI.BLEND_MODES.MULTIPLY] = MULTIPLY_FULL;\r\n        blendFullArray[PIXI.BLEND_MODES.OVERLAY] = OVERLAY_FULL;\r\n        blendFullArray[PIXI.BLEND_MODES.HARD_LIGHT] = HARDLIGHT_FULL;\r\n        blendFullArray[PIXI.BLEND_MODES.SOFT_LIGHT] = SOFTLIGHT_FULL;\r\n    }\r\n\r\n    let filterCache: Array<BlendFilter> = [];\r\n    let filterCacheArray: Array<Array<BlendFilter>> = [];\r\n\r\n    export function getBlendFilter(blendMode: PIXI.BLEND_MODES) {\r\n        if (!blends.blendFullArray[blendMode]) {\r\n            return null;\r\n        }\r\n        if (!filterCache[blendMode]) {\r\n            filterCache[blendMode] = new BlendFilter({blendCode: blends.blendFullArray[blendMode]});\r\n        }\r\n        return filterCache[blendMode];\r\n    }\r\n\r\n    export function getBlendFilterArray(blendMode: PIXI.BLEND_MODES) {\r\n        if (!blends.blendFullArray[blendMode]) {\r\n            return null;\r\n        }\r\n        if (!filterCacheArray[blendMode]) {\r\n            filterCacheArray[blendMode] = [this.getBlendFilter(blendMode)];\r\n        }\r\n        return filterCacheArray[blendMode];\r\n    }\r\n}","namespace pixi_picture {\r\n    export class Sprite extends PIXI.Sprite {\r\n        _render(renderer: PIXI.Renderer): void\r\n        {\r\n            const texture = (this as any)._texture;\r\n\r\n            if (!texture || !texture.valid)\r\n            {\r\n                return;\r\n            }\r\n\r\n\r\n            const blendFilterArray = getBlendFilterArray(this.blendMode);\r\n\r\n            if (blendFilterArray) {\r\n                renderer.batch.flush();\r\n                if (!renderer.filter.pushWithCheck(this, blendFilterArray)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.calculateVertices();\r\n            renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\r\n            renderer.plugins[this.pluginName].render(this);\r\n\r\n            if (blendFilterArray) {\r\n                renderer.batch.flush();\r\n                renderer.filter.pop();\r\n            }\r\n        }\r\n    }\r\n}\r\n","namespace pixi_picture {\r\n    export class TilingSprite extends PIXI.TilingSprite {\r\n        _render(renderer: PIXI.Renderer): void\r\n        {\r\n            // tweak our texture temporarily..\r\n            const texture = (this as any)._texture;\r\n\r\n            if (!texture || !texture.valid)\r\n            {\r\n                return;\r\n            }\r\n\r\n            const blendFilterArray = getBlendFilterArray(this.blendMode);\r\n\r\n            if (blendFilterArray) {\r\n                renderer.batch.flush();\r\n                if (!renderer.filter.pushWithCheck(this, blendFilterArray)) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this.tileTransform.updateLocalTransform();\r\n            this.uvMatrix.update();\r\n\r\n            renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\r\n            renderer.plugins[this.pluginName].render(this);\r\n\r\n            if (blendFilterArray) {\r\n                renderer.batch.flush();\r\n                renderer.filter.pop();\r\n            }\r\n        }\r\n    }\r\n}\r\n","/// <reference types=\"pixi.js\" />\r\nnamespace pixi_picture {\r\n\t(PIXI as any).picture = pixi_picture;\r\n}\r\n"]}